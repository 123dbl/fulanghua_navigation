#!/usr/bin/env python

import rospy
import tf
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped

import math

def frange(x, y, jump):
    while x < y:
        yield x
        x += jump

def main():
    rospy.init_node('astroid_curve_publisher')
    
    path_pub = rospy.Publisher('astroid_path', Path, queue_size=10)
    path = Path()

    path.header.frame_id = "map"
    radius = 10.0

    has_initialize = True
    
    for t in frange(-math.pi, math.pi, 0.01):
        x = radius * math.cos(t) ** 3
        y = radius * math.sin(t) ** 3
        
        if has_initialize:
            old_x = x
            old_y = y
            has_initialize = False

        pose = PoseStamped()
        pose.pose.position.x = x
        pose.pose.position.y = y
        
        yaw = 0.0
        if (-math.pi/2 <= t <= 0) or (math.pi/2 <= t <=math.pi):
            yaw = math.atan2(old_y - y, old_x - x)
        else:
            yaw = math.atan2(y - old_y, x - old_x)
        
        #yaw = 0.0
        #if(-0.1 < math.cos(t) < 0.1):
        #    yaw = 0.0
        #else:
        #    yaw = -math.sin(t) / math.cos(t)
        
        q = tf.transformations.quaternion_from_euler(0, 0, yaw)
        pose.pose.orientation.x = q[0]
        pose.pose.orientation.y = q[1]
        pose.pose.orientation.z = q[2]
        pose.pose.orientation.w = q[3]
        path.poses.append(pose)

        old_x = x
        old_y = y
    
    r = rospy.Rate(10)
    while not rospy.is_shutdown():
        path.header.stamp = rospy.get_rostime()
        path_pub.publish(path)
        r.sleep()
    
if __name__ == '__main__':
    main()

